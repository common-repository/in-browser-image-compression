const update=()=>{let t;const p=new Promise((resolve,reject)=>{navigator.serviceWorker.getRegistration().then(reg=>{const updateFound=()=>{reg.installing?reg.addEventListener("statechange",stateChange):resolve(!1)},stateChange=()=>{reg.waiting&&(navigator.serviceWorker.controller?(navigator.serviceWorker.controller.addEventListener("message",function(event){"stopped"===event.data.command&&(reg.waiting.postMessage({command:"skip-waiting"}),resolve(!0))}),navigator.serviceWorker.controller.postMessage({command:"stop-working"})):resolve(!1))};reg.waiting?reg.waiting.postMessage({command:"skip-waiting"}):(reg.addEventListener("updatefound",updateFound),t=setTimeout(()=>{reg.removeEventListener("updatefound",updateFound),reg.removeEventListener("statechange",stateChange),resolve(!1)},1e4))}).catch(e=>{reject(e)})});return p.finally(()=>{clearTimeout(t)}),p},initSw=({sw_url,scope,config,customReplyHandler})=>{const replyHandler=customReplyHandler??function(sendMessage){return function(event){"get-config"===event.data.command&&sendMessage({command:"set-config",config:config})}},swReady=resolve=>{const targetEventHandler=navigator.serviceWorker.controller,eventHandler=navigator.serviceWorker;function sendMessage(message){var messageChannel=new MessageChannel;targetEventHandler.postMessage(message,[messageChannel.port2])}eventHandler.addEventListener("message",replyHandler(sendMessage)),resolve({sendMessage:sendMessage,eventHandler:eventHandler,update:update})};return new Promise((resolve,reject)=>{"serviceWorker"in navigator?navigator.serviceWorker.controller?swReady(resolve):navigator.serviceWorker.register(sw_url,{scope:scope}).then(reg=>{navigator.serviceWorker.controller&&swReady(resolve)}).catch(function(error){console.log("Registration failed with "+error),reject(error)}):reject("Service worker unsupported")})};export{initSw,update};
//# sourceMappingURL=sw-init.f452a4081a13d9d6.js.map